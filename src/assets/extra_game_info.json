[
  {
    "title": "Jugghoul",
    "tags": ["jam", "fun"],
    "tools": ["Godot", "Piskel"],
    "roles": ["programming", "pixel art", "animation", "design", "coordination"],
    "description":
    "A bite sized rage game about juggling, made for Global Game Jam 2024. A culmination of my legacy of evil games spanning all the way back to YUT YUT.",
    "learning":
    "This was the first in person game jam I'd done since GGJ 2020, which was my first ever. It was a good experience to meet and collaborate with total strangers in real life. I ended up in a team of significantly varied experience levels, coordinating the initial roles accordingly to do the rest of it myself while avoiding the mentor role that I often step into, especially with students. I ended up calling upon a couple of friends remotely for sound effects a music. On the technical side, it was just practice and expression."
  },
  {
    "title": "ET-Skate",
    "tags": ["jam", "fun"],
    "tools": ["Godot", "Blender"],
    "roles": ["programming", "animation", "design", "coordination"],
    "description":
    "Over their 2023 winter break, the University of Calgary's Game Design Club put on a game jam. In a limited time, participants had to work together in teams to develop a video game matching a theme or special constraint. My favourite activity. For this particular event, teams were to make an arcade game. The organizers would create a rudimentary cabinet housing a tiny computer, small monitor, a joystick, and two buttons. Projects were limited materially by the available inputs and hardware capacity, but also the manner in which games would be played. High scores were a must, with limited, repeatable playtime. These unique requirements introduced novel and creatively stimulating ramifications to the design and implementation process.\nWith constraints established, we had plenty of time with no plan to speak of. I had a vague indication of interest from a friend that we might, maybe do something for the jam. Our short walk through the requirements and aesthetics of the theme came up empty. After giving up, he joked: \"Imagine a sequel to ET where they have to teach him how to skateboard\". This snowballed. Realizing the physiological limitations of the creature, referencing classic skateboarding games, exploring complex and expressive uses of the limited inputs, ska. The iconic cover image of the bike crossing a full moon morphed into the wrinkled plant goblin flying through the night sky on four wheels. There was nothing to be done. This had to become a reality.\nRoles were assigned, he would model the monster. I, the unemployed one, would have time to do everything else. Plans were drawn, thought to paper, breaking down what needed to be done into an itemized list of tasks. Something digestible. I would have to \"make the game\", but that means making the jumping, pushing, turning, tricks, adding animation to all these actions in a way that could be easily integrated with the model when it was finished, wipeouts, the combo system, the scores, saving scores, displaying scores, sound effects, something to handle music... Another was implicated. A mutual friend, sonically gifted. He would draw from the soundtracks of Skate 3 and Tony Hawk's Pro Skater to craft an immaculately nostalgic track.\nEveryone played their parts beautifully. Communicating throughout, adapting to changes made as the project became itself. By the deadline, we had crafted something silly and a bit dumb. A pixelated Extraterrestrial kickflipping to retro ska in an empty checkerboard hellscape. A genuine expression of that initial vision, moulded by the abilities and inclinations of those involved into material form. I am quite proud of it.",
    "learning":
    "I've been at this for a good bit. I figured out that I can just grab and wrangle the bones of a mesh skeleton for very cheap and effective juice, but more than anything this project was a celebration of what I can do and love doing."
  },
  {
    "title": "Golfo (Jam Version)",
    "tags": ["jam", "ongoing"],
    "tools": ["Godot", "Blender"],
    "roles": ["programming", "modelling", "design", "coordination", "technical art"],
    "description":
    "A little driving game where you have to pick up golf balls from the driving range without getting hit. Originally made for the University of Alberta Games Den's Wild Card Jam, this has since grown into my current long term project. Firstly, I made it functional, then I tried to make it fun, and now I've been adding little things here and there as they come up along the way to something vaguely \"complete\". Spiritual and technical (driving model) successor to Surreal Taxi.",
    "learning":
    "Around the time I started this project was when I solidified my development philosophy. I like to make games about one thing. They can have a hundred things going on, but in the best games I've played or made, everything complements one focal point that the entire experience is built around. That pillar can be a mechanic, feeling, relationship, or even just an image you can describe. The plan for this jam was to build the game around the music. Unfortunately, the music didn't turn out due to circumstance. It happens. And so, I'm left with a game about tangents, a genuine conundrum. I've done my best to embrace it, encouraging what farfetched design riffs can be made feasible, letting design come to a more unconscious natural conclusion of factors rather than intentional design. Several very cool ideas have come of this but I do still need to cut my self off and finish the game at some point. With music still in progress, I am excited to see how things change as the score takes shape.\nSome specific technical things I've messed around with include terrain generation, rendering and handling collision with a very large amount of points, chunking and running both of the previous asynchronously, advanced shaders, making custom gizmos, learning 3D rotation (mostly) properly, 3D navigation UI, and diegetic UI."
  },
  {
    "title": "Reese's Pup",
    "tags": ["jam", "fun"],
    "tools": ["Godot", "Piskel"],
    "roles": ["programming", "pixel art", "animation", "coordination"],
    "description":
    "A top down dog themed dungeon crawler with a dodge roll where you have to fight chocolate. Made for the 2023 Inn From the Cold Game Jam hosted by the University of Calgary Game Design Club.",
    "learning":
    "The combat system in this game is technically an offshoot of the one in Drum Pit. This project was practice working significantly with another programmer on the same project in a very short period of time."
  },
  {
    "title": "Wavepool",
    "tags": ["fun"],
    "tools": ["MonoGame"],
    "roles": ["programming", "design"],
    "description":
    "A relaxing digital instrument built to recreate and expand upon a toy application I made when I first started making games. A grid of dots is disturbed dynamically by mouse clicks. In this version, a simple \"radial instrument\" has been added that can play 4 different not samples at different pitches, switching between major and minor by clicking in the middle. This is something I keep on my desktop to fiddle around with when I need it. Made for the 2022 Games Den Quicker game jam.",
    "learning":
    "I had wanted to remake the program in something more performant after losing the original to a hardware failure before I knew about source control. I had also been meaning to try out monogame for some time. These desires collided in the convenience of a game jam. Using C# with a lower level framework was an absolute joy."
  },
  {
    "title": "Drum Pit",
    "tags": ["fun"],
    "tools": ["Unity", "Piskel", "Reaper"],
    "roles": ["programming", "pixel art", "animation", "design", "audio", "technical art"],
    "description":
    "Drum Pit is a game about hitting things with a stick, the culmination of several experiments in animation and systems design. It is a 2D combat platformer with rougelike dungeon generation and progression, discoverable upgrades, multiple weapon types with complex attack trees, a complex final boss, fully remapable controls, absurd graphical settings including the ability to remap the palette to custom colours and a posterization slider, and a wide range of custom foley. I am very proud of most every aspect of this project, but the level, enemies, and boss do not compliment the depth of the player's combat abilities very well. They're just there to have something to do, which is why I added them.",
    "learning":
    "I made this project to cap off the combat system I started with Counter Castle and to effectively express my prowess in pixel art animation. In these and many other areas, this project was a strengthening of skills and ideas I'd been honing for years. However, two areas stand out. Firstly was self management on the scale of a project I spent more than a year developing alone. It is no small task. Second is foley. I was lucky enough to connect with a local composer who graciously provided the score of the game. Sound effects, I did myself. With the exception of the rainstick, which I ended up sampling, every sound effect in the game is something I personally recorded. This was enormously fun and I am elated to never do it again because of the wonderful audio-talented collaborators I've met over the years."
  },
  {
    "title": "Schlupus",
    "tags": ["jam"],
    "tools": ["Unity", "Blender"],
    "roles": ["programming", "modelling"],
    "description":
    "A tiny nothing game about a silly little guy stacking boxes. Made for lame jam 12.",
    "learning":
    "I made this project to learn in-engine inverse kinematics, which I did. It's a very useful thing that I haven't yet found much of a use for, at least directly. The skeleton morphs and head jiggle of ET-Skate can be traced back to this."
  },
  {
    "title": "Drawscii",
    "tags": ["jam"],
    "tools": ["Love2D"],
    "roles": ["programming", "design"],
    "description":
    "A little toy paint program made to draw ascii art. Made with Love2D for the University of Calgary Game Design Club's text-based game jam.",
    "learning":
    "While this is made with Love2D, it isn't written in lua. Instead, I used a language a friend was working on at the time called Jammy, which transpiled to lua. It was interesting to use a higher level scripting language for a game, which was significantly different from the C# I was primarily used to at this point. It was VERY interesting to use a transpiler that was actively in development and had no useful error outputs other than bothering the person who made it. Overall very cool and fun to make."
  },
  {
    "title": "Dashed",
    "tags": ["jam"],
    "tools": ["Godot", "Blender"],
    "roles": ["programming", "modelling", "design"],
    "description":
    "A local multiplayer boat racing game inspired by Hydro Thunder, made for the 2021 Games Den Quick Game Jam. The boat driving is complicated by the addition of planing into the handling model: at a certain speed, the boat will flatten on the surface of the water and go much faster.",
    "learning":
    "The focus of this project was to learn how to implement online multiplayer. Boat racing was chosen as an vague idea I'd had around for a while that applied to the theme. After getting the handling model together, it turned out that I could implement multiplayer functionality really easily simply by synchronizing the positions of every boat. Each would still pass through checkpoints and make progress. Even without a definitive authoritative state across clients, everyone would end up with the same results. The other challenge was creating a course. With no experience modelling or implementing environments, I essentially ended up cutting a tube out of a big slab using techniques I know from character modelling. I learned a few things about optimizing mesh collision (avoiding it), when putting the track in engine."
  },
  {
    "title": "Howard",
    "tags": ["jam", "bad"],
    "tools": ["Unity", "Blender"],
    "roles": ["programming", "modelling", "technical art"],
    "description":
    "A buggy physics sandbox about trying to balance an island in the sea.",
    "learning":
    "Trying to make both a balancing disc and planetary physics at the same time taught me some hard lessons about math and 3D rotation, mainly just in how complicated they can be. Also practised some shaders"
  },
  {
    "title": "Slug Rider",
    "tags": ["jam"],
    "tools": ["Unity", "Blender", "Pencil2D"],
    "roles": ["programming", "animation"],
    "description":
    "A very simple skateboarding games using 2D sprites in a 3D environment. Spiritual successor to Skatboard Rat and ancestor to ET-Skate.",
    "learning":
    "I had wanted both to experiment with the 2D-in-3D look and to make a 3D skateboarding game for a while. I used a game to do both. Ripped most of the handling model from surreal taxi (forces on orb) and added the ability to spin around in the air, and to stop and look around. The sprites were made using Pencil2D, which was awesome to use, and gave me a very fun bit of practice in drawn animation."
  },
  {
    "title": "Surreal Taxi",
    "tags": ["jam", "fun"],
    "tools": ["Unity", "Blender"],
    "roles": ["programming", "modelling", "coordination"],
    "description":
    "An arcade driving game with obvious inspirations, in this game you have to ferry hat goblins around in a strange geometric plain. If you get airborne, you can perform tricks for extra money that means nothing. Customers speak gibberish supplied by a markov chain of copypastas. Most excitingly, the game has a killer dynamic soundtrack that will respond to being stopped or airborne. Made for lame jam 9.",
    "learning":
    "This project had a sizeable and experienced team and so required special effort to cut the intended scope of the project into pieces fit for each member. My primary contribution was the car, both the 3D and handling model which is based on manipulating a sphere collider that acts as the physics base of your vehicle. The movement of the car's model is just a display on top of the sphere, responding to changes in velocity and orientation. I also got to work with our composer to implement the dynamic audio using in engine audio filters for different scenarios. I have brought both aspects into many future games, most prominently in what Golfo is becoming."
  },
  {
    "title": "Bulby's Domino Adventure",
    "cover_override": "/bulby_cover_override.png",
    "tags": ["jam"],
    "tools": ["Unity"],
    "roles": ["programming", "animation", "coordination"],
    "description":
    "A simple 3D platformer. Run around as a cute little character and knock over dominoes. There was plans of a more complex puzzle game with coloured lights, but most all complexity got cut. Made for the 2021 Alberta Game Jam",
    "learning":
    "Having done several jams at this point, is was used to working with programmers, artists, musicians, but this project introduced me to working with a team of people that had been formally trained in game design. Of the five of us, three were fresh grads with a game design certificate (or diploma) from the University of Lethbridge. They had knowledge of design and engine work, but I found it challenging to navigate their completely different approach to development, in addition to engine troubles. I did not do nearly as good of a job at it than I could have. It was an excellent learning experience working with people from different technical backgrounds under pressure of a time restraint."
  },
  {
    "title": "Snail Bail",
    "tags": ["jam", "fun"],
    "tools": ["Godot"],
    "roles": ["programming", "coordination"],
    "description":
    "A challenging platformer with puzzle elements and a unique premise. Your character leaves behind a solid trail of slime, at the end of which is an enemy that will kill you. You must keep moving to avoid the enemy, and use the slime trail to reach the objective, overcoming a number of puzzles and platforming challenges. I am very happy with the concept and game feel. Made for the 2021 Innovator's Game Jam hosted by the University of Alberta Engineering Innovation Hub",
    "learning":
    "My main challenge with this project was coordinating with a younger team member. Communication required extra care as I tried to assist and guide without being patronizing."
  },
  {
    "title": "Monke Return",
    "tags": ["jam"],
    "tools": ["Piskel"],
    "roles": ["pixel art", "animation"],
    "description":
    "A top down (twin stick shooter??) where you have to turn all the citizens of a small town into monkeys and bring them back to the jungle. Made for the 2021 Out of Hibernation Game Jam hosted by the University of Alberta Games Den.",
    "learning":
    "I mainly just did art, where I got to play with a perspective I wasn't familiar with. I also did a bit of engine/programming work implementing the animations I made."
  },
  {
    "title": "Rythmic Time Strategy",
    "tags": ["jam", "fun"],
    "tools": ["Piskel"],
    "roles": ["pixel art", "coordination"],
    "description":
    "A simple real time strategy game that ticks to the beat. Made for the 2021 GMTK Game Jam. I really like the concept and feel of the game, but it lacks the clarity and/or complexity that (in my understanding) makes RTS games really work. I'd love to remake this someday with a proper tutorial, more complex unit types, better management UX, fleshed out objectives, and maybe even some kind of small scale campaign.",
    "learning":
    "I mostly did art, but also had to coordinate with two other programmers in a very short period of time."
  },
  {
    "title": "Meat Cute",
    "tags": ["jam"],
    "tools": ["Unity"],
    "roles": ["programming"],
    "description":
    "A weird take on a matching game where you have to attach limbs to bodies then match limbed bodies together for points using a fired projectile to select.",
    "learning":
    "My primary contribution to the project was figuring out how to make the limbs wiggle and attach to bodies and each other using joint components in Unity."
  },
  {
    "title": "BadgerGoGo",
    "tags": ["jam", "bad"],
    "tools": [".NET"],
    "roles": ["programming"],
    "description":
    "A short text based adventure in which you are a badger. Made for the University of Calgary Game Design Club's 2021 text based game jam.",
    "learning":
    "After using the C# with Unity for many projects, this was an excuse to use the language \"raw\". It was fun to play around with some language features outside of the engine in a very low-stakes, small scale project."
  },
  {
    "title": "QuadSense",
    "tags": ["jam", "bad"],
    "tools": ["Godot"],
    "roles": ["programming", "technical art"],
    "description":
    "A weird puzzle game where you have to use unconventional methods to navigate a maze. Made for Global Game Jam 2021.",
    "learning":
    "The main things I learned from this project where the results of it's experimentation with the user experience. It's not very fun to have your primary means of navigation taken away if the thing replacing it isn't interesting and reliable. This was also the first project I use shaders in a meaningful capacity. I also learned how bad of an idea it is to try and teach newcomers on a highly unconventional project."
  },
  {
    "title": "Herding Cats",
    "tags": ["jam"],
    "tools": ["Unity", "Piskel"],
    "roles": ["pixel art", "animation"],
    "description":
    "A game about keeping cats in a circle on the ground. Made for the University of Alberta Games Den's Let's Jam Together.",
    "learning":
    "Just did art for this one, but I learned how hard and unnecessary it is to make animated eight directional sprites."
  },
  {
    "title": "Bungee Buster",
    "tags": ["jam", "fun"],
    "tools": ["Unity", "Piskel"],
    "roles": ["programming", "pixel art", "animation"],
    "description":
    "A little rougelike built in two weeks for the 2020 Lowres jam. I made this with a friend with comparable experience, splitting tasks based on interest and need.",
    "learning":
    "The entire game had to be within a 64x64 screen. That constraint is what makes the lowres jam so cool and interesting. Designing a character, enemies, animations, and an environment that could be readable and interesting at that size was a very interesting challenge. This also served in the line of iteration (in it's implementation) from Counter Castle through to Drum Pit."
  },
  {
    "title": "Space Storm Pizza Panic",
    "tags": ["jam", "bad"],
    "tools": ["Unity"],
    "roles": ["programming"],
    "description":
    "A local multiplayer spaceship driving game where both player's controls are periodically randomized. Practically impossible to play, let alone beat. The core idea came from the thought of having to play finger twister with someone on a single keyboard. Made for the 2020 GMTK Game Jam.",
    "learning":
    "This project saw me implementing features to a design and specification that was largely external rather than a design process I wa directly involved in. Good practice."
  },
  {
    "title": "Bow Practice",
    "tags": ["fun"],
    "tools": ["Unity", "Piskel"],
    "roles": ["programming", "pixel art", "animation"],
    "description":
    "A short study of juice, made in a few days. I had a larger idea about a multiplayer version where players would fight with and over a single arrow with significant emphasis on movement for getting and dodging the arrow. Thankfully I cut the idea way down to this simple study.",
    "learning":
    "This is in a line of projects where I just had a fun little idea and some time. With a solid grasp of how to scope effectively, I could really just make things. This project was practice in animation, player movement, and particle effects using tools I was already familiar with."
  },
  {
    "title": "Counter Castle [Demo]",
    "tags": [],
    "tools": ["Unity", "Piskel"],
    "roles": ["programming", "pixel art", "animation", "design"],
    "description":
    "A short little game built around the first iteration of the 2D combat system I would use in later projects, primarily Drum Pit. The excuse to play the game consists of a box of enemies that you lock yourself in to earn money to buy upgrades to fight the boss and go to the next floor. Movement is fairly simple, slightly augmented by two special directional attacks you can do in the air. Key to the combat, the parry slows down time but speeds up your attacks, and can be upgraded to heal you. Direct ancestor of Drum Pit.",
    "learning":
    "This was the first long term project I made in a proper engine (that actually got finished). It was primarily meant to try making a proper 2D combat system. The system is largely implemented using animation keys to turn on and off and change the shape of hit/hurtboxes. Animation events are also used to apply movement forces and check for collisions in certain actions. In addition to the combat system, I got learned in making sprites, animating player attacks, enemies, designing levels, making bosses, implementing upgrades, and tying it all together in levels with progress saved between them."
  },
  {
    "title": "Skatboard Rat",
    "tags": [],
    "tools": ["Unity", "Blender"],
    "roles": ["programming", "animation"],
    "description":
    "A dinosaur game clone with a rat on a skateboard.",
    "learning":
    "I made this after hearing that Blender could be used for 2D animation, and to see if I could use that for a game. I have since found alternatives, but it was fun to play around with the grease pencil and practice some animation that wasn't pixel art."
  },
  {
    "title": "BiggyFishy",
    "tags": ["jam"],
    "tools": ["Godot", "Piskel"],
    "roles": ["pixel art"],
    "description":
    "A comfy aquarium game, made for the 2020 Out of Hibernation Game Jam hosted by the University of Alberta Games Den",
    "learning":
    "This is from the second game jam I ever participated in, I only did about half the pixel art (everything that isn't a fish). Other, more experienced members of the team coordinated more explicitly, giving me the opportunity to contribute to a team in a defined role. I had to learn how to work outside of my comfort zone, making sprites to what was needed while trying to share what I knew when it could be helpful."
  },
  {
    "title": "Kusa",
    "tags": ["jam", "bad"],
    "tools": ["Unity", "Piskel"],
    "roles": ["pixel art"],
    "description":
    "A terrible game that nobody should play where you are a patch of grass and have to avoid the worst drawing of a sheep that I've ever seen.",
    "learning":
    "Just did art, of which there is little."
  },
  {
    "title": "Big Boy Beach Ball",
    "tags": ["ongoing"],
    "tools": ["Processing", "Godot"],
    "roles": ["programming", "design"],
    "description":
    "A game about Big Boys playing Beach ball; a simple 2D volleyball game. Contains a tournament mode, local pvp and coop and an underdeveloped overworld with two minigames and basic character customization.\nThis is ultimately a scrap of what was imagined as a much grander project, which would've been my second released game. I still have the vague plans for a story around in notes somewhere. The game is fun, though and recently I've started work on a sort of revival in Godot. The base gameplay is the same (I stand by it's simplicity), but I've shifted focus to the seed of an idea hiding below the surface of the original: character customization in a very weird way.\nIn the original project, characters are defined as a set of SVG paths (hardcoded programmatically, not in files), and what little customization there was either swaps between opponent designs or a small set of defined features. But this is SVG, I could access these as shapes directly, I could save and load them from files, I could dynamically distort them at runtime. So of course I had to make an entire stripped down svg editor disguised as a character creation screen, and write code to save, import, and dynamically squash and stretch any given set of shapes as a character in the game, in accordance with the official file specification (which is fully implemented). In addition to this, I think the game would be a fantastic candidate for casual multiplayer. With steam workshop support, I could very easily facilitate the sharing and use of any and all character models. You could see the zaniest little guys in a random match! This project is currently on the backburner, but it is hot.",
    "learning":
    "From the initial version of this project, I learned about the limits of how far ideas can take you without a plan. I learned about scope and about paying attention to what works in a project. In the revival, I've learned about the SVG file specification, flexed my animation knowledge making some joyfully squishy boy orbs, figured out how to properly and efficiently distort a se of points into a few different shaped as required by the animation, and gotten some really good practice in UI/UX design"
  },
  {
    "title": "YUT YUT",
    "tags": ["fun", "bad"],
    "tools": ["Processing"],
    "roles": ["programming", "design", "coordination"],
    "description":
    "YUT YUT is a game about TANKS containing TANKS in which many TANKS die. Fight through this TANKy TANK game to face your mortal TANK enemy and reclaim your TANK village's lost cabbage god. TANKS\nThis was the first proper game I ever made. In my first year of university, as I exposed to the wonders of programming, I started to make random little games in a little program called Processing, which is largely an IDE and graphics library for Java. You could find worse ways to make a game. The thought of remaking Wii Tanks snowballed with more and more zany and sadistic ideas into a year long project and eventual steam release. I worked with a classmate who provided ideas and made all the levels while I made the game part with tools to speed up the level design process. The levels were made in order, with each intended to be difficult, by someone who had continual practice with the game and increasing standard for difficulty as it went on. The game is genuinely evil. There are 19 different types of enemy tank including predictive shots, mortars, moles that cannot be hurt when burrowing beneath the ground, and the final type that will clear the entire screen with a massive laser if you spend more than three seconds in their line of sight. To (slightly) compensate for this there are 7 different player tanks, some of which are arguably a disadvantage, and which each level only allows a single type. 120 levels are split into 5 worlds, each with a boss. There is also a full sandbox level editor that unlocks tank types as you encounter them, which was actually made to aid level creation. There is a hardcore mode, where you have to get through every world without dying or your progress resets, and an arcade mode where you have to beat the whole game without dying. There is a independent timer for each level and collective timer. There is a death count. Beating a level without shooting gives you a special red star on that level. There is a specific setting to stop drawing the background, smearing the whole screen. Beating a level with this setting enabled gives you a special red star. There is a setting that removes the rounded corners from some wall blocks which increases performance by 4x. Each tile in the level select screen has a little box in the corner that will pull up a preview os that level if you hover over it. There are 5 hidden minigames that can only be accessed by clicking on tiny obscure places in different menu screens. It is the foundation of my development philosophy and a treasured gem of my artistic output. It will be remade.",
    "learning":
   "This project is largely how I learned to program, being naturally introduced to many of the fundamental and advanced concepts and patterns of software engineering. I genuinely feel like I skipped two years of my degree with this project, learning in class the name for ideas I was already familiar with. As such, the code is filled with beautiful and horrifying growing pains. All the UI is custom written and hardcoded. Every level in the game is declared explicitly in two-dimensional integer arrays in files thousands of lines long, one for walls and one for tanks. The game is saved to separate CSVs in the local directory, so when I wanted to fix a game breaking resource issue by switching audio libraries on the steam build, the only thing I could do was reset every player's save file. The impact on my technical development is too great to properly express."
  }
]